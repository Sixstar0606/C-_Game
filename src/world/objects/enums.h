#pragma once
#include <unordered_map>

namespace GTServer {
    enum eWorldType {
        WORLD_TYPE_NORMAL,
        WORLD_TYPE_BEACH
    };
    enum eWorldCategory {
        WORLD_CATEGORY_DEFAULT,
        WORLD_CATEGORY_TOP_WORLDS,
        WORLD_CATEGORY_RANDOM,
        WORLD_CATEGORY_YOUR_WORLDS,
        WORLD_CATEGORY_ADVENTURE,
        WORLD_CATEGORY_ART,
        WORLD_CATEGORY_FARM,
        WORLD_CATEGORY_GAME,
        WORLD_CATEGORY_GUILD,
        WORLD_CATEGORY_INFORMATION,
        WORLD_CATEGORY_MUSIC,
        WORLD_CATEGORY_PARKOUR,
        WORLD_CATEGORY_PUZZLE,
        WORLD_CATEGORY_ROLEPLAY,
        WORLD_CATEGORY_SHOP,
        WORLD_CATEGORY_SOCIAL,
        WORLD_CATEGORY_STORAGE,
        WORLD_CATEGORY_STORY,
        WORLD_CATEGORY_TRADE
    };  
    static std::unordered_map<eWorldCategory, std::string> world_category_as_string = {
        { WORLD_CATEGORY_DEFAULT, "Default" },
        { WORLD_CATEGORY_TOP_WORLDS, "Top Worlds" },
        { WORLD_CATEGORY_RANDOM, "Random" },
        { WORLD_CATEGORY_YOUR_WORLDS, "Your Worlds" },
        { WORLD_CATEGORY_ADVENTURE, "Adventure" },
        { WORLD_CATEGORY_ART, "Art" },
        { WORLD_CATEGORY_FARM, "Farm" },
        { WORLD_CATEGORY_GAME, "Game" },
        { WORLD_CATEGORY_GUILD, "Guild" },
        { WORLD_CATEGORY_INFORMATION, "Information" },
        { WORLD_CATEGORY_MUSIC, "Music" },
        { WORLD_CATEGORY_PARKOUR, "Parkour" },
        { WORLD_CATEGORY_PUZZLE, "Puzzle" },
        { WORLD_CATEGORY_ROLEPLAY, "Roleplay" },
        { WORLD_CATEGORY_SHOP, "Shop" },
        { WORLD_CATEGORY_SOCIAL, "Social" },
        { WORLD_CATEGORY_STORAGE, "Storage" },
        { WORLD_CATEGORY_STORY, "Story" },
        { WORLD_CATEGORY_TRADE, "Trade" }
    };

    enum eWorldFlags {
        WORLDFLAG_NUKED = (1 << 0),
        WORLDFLAG_RESTRICT_NOCLIP = (1 << 1),
        WORLDFLAG_JAMMED = (1 << 2),
        WORLDFLAG_PUNCH_JAMMER = (1 << 3),
        WORLDFLAG_ZOMBIE_JAMMER = (1 << 4),
        WORLDFLAG_ANTI_GRAIVTY = (1 << 5),
        WORLDFLAG_BALLOON_JAMMED = (1 << 6)
    };
    enum eWorldWeather {
        WORLD_WEATHER_DEFAULT,
        WORLD_WEATHER_SUNSET,
        WORLD_WEATHER_NIGHT,
        WORLD_WEATHER_ARID,
        WORLD_WEATHER_SUNNY,
        WORLD_WEARHER_RAINY_CITY,
        WORLD_WEATHER_HARVEST_MOON,
        WORLD_WEATHER_MARS,
        WORLD_WEATHER_SPOOKY,
        WORLD_WEATHER_GROWGANOTH,
        WORLD_WEATHER_NOTHINGNESS,
        WORLD_WEATHER_SNOWY,
        WORLD_WEATHER_GROWCH_MAD,
        WORLD_WEATHER_GROWCH_HAPPY,
        WORLD_WEATHER_UNDERSEA,
        WORLD_WEATHER_WARP,
        WORLD_WEATHER_GREEN_COMET,
        WORLD_WEATHER_BLUE_COMET,
        WORLD_WEATHER_PARTY,
        WORLD_WEATHER_PINEAPPLE,
        WORLD_WEATHER_SNOWY_NIGHT,
        WORLD_WEATHER_SPRING,
        WORLD_WEATHER_HOWL,
        WORLD_WEATHER_SUNNY_V2,
        WORLD_WEATHER_HEATWAVE_P,
        WORLD_WEATHER_HEATWAVE_R,
        WORLD_WEATHER_HEATWAVE_G,
        WORLD_WEATHER_HEATWAVE_B,
        WORLD_WEATHER_HEATWAVE_O,
        WORLD_WEATHER_STUFF,
        WORLD_WEATHER_PAGODA,
        WORLD_WEATHER_APOCALYPSE,
        WORLD_WEATHER_JUNGLE,
        WORLD_WEATHER_BALLOON,
        WORLD_WEATHER_BACKGROUND,
        WORLD_WEATHER_AUTUMN,
        WORLD_WEATHER_VALENTINE,
        WORLD_WEATHER_ST_PADDY,
        WORLD_WEATHER_EPOCH_ICE,
        WORLD_WEATHER_EPOCH_VOLCANO,
        WORLD_WEATHER_EPOCH_LAND,
        WORLD_WEATHER_SUNNY_V3, 
        WORLD_WEATHER_DIGITAL_RAIN,
        WORLD_WEATHER_MONOCHROME,
        WORLD_WEATHER_FROZENCLIFF,
        WORLD_WEATHER_SURGWORLD,
        WORLD_WEATHER_BOUNTIFUL,
        WORLD_WEATHER_METEOR_SHOWER,
        WORLD_WEATHER_STARGAZING,
        WORLD_WEATHER_ISLAND,
        WORLD_WEATHER_RETIRED_SHIP,
        WORLD_WEATHER_GROWHILL,
        WORLD_WEATHER_SEA_V2,
        WORLD_WEATHER_LEGENDARY_LOCK,
        WORLD_WEATHER_BLOOD_DRAGON,
        WORLD_WEATHER_PERSIA,
        WORLD_WEATHER_NONE_56,
        WORLD_WEATHER_NONE_57,
        WORLD_WEATHER_RADICAL_CITY,
        WORLD_WEATHER_PLAZA,
        WORLD_WEATHER_NEBULA,
        WORLD_WEATHER_PROTOSTAR_LANDING
    };
    
    enum eTileExtraType : uint8_t {
        TILEEXTRA_TYPE_NONE,
        TILEEXTRA_TYPE_DOOR,
        TILEEXTRA_TYPE_SIGN,
        TILEEXTRA_TYPE_LOCK,
        TILEEXTRA_TYPE_SEED,
        TILEEXTRA_TYPE_MAILBOX = 6,
        TILEEXTRA_TYPE_BULLETIN,
        TILEEXTRA_TYPE_DICE,
        TILEEXTRA_TYPE_PROVIDER,
        TILEEXTRA_TYPE_ACHIEVEMENT,
        TILEEXTRA_TYPE_HEART_MONITOR,
        TILEEXTRA_TYPE_DONATION_BLOCK,
        TILEEXTRA_TYPE_TOYBOX,
        TILEEXTRA_TYPE_MANNEQUIN,
        TILEEXTRA_TYPE_MAGIC_EGG,
        TILEEXTRA_TYPE_GAME_RESOURCES,
        TILEEXTRA_TYPE_GAME_GENERATOR,
        TILEEXTRA_TYPE_XENONITE,
        TILEEXTRA_TYPE_DESSUP,
        TILEEXTRA_TYPE_CRYSTAL,
        TILEEXTRA_TYPE_BURGLAR,
        TILEEXTRA_TYPE_SPOTLIGHT,
        TILEEXTRA_TYPE_DISPLAY_BLOCK,
        TILEEXTRA_TYPE_VENDING_MACHINE,
        TILEEXTRA_TYPE_FISHTANK,
        TILEEXTRA_TYPE_SOLAR,
        TILEEXTRA_TYPE_FORGE,
        TILEEXTRA_TYPE_GIVING_TREE,
        TILEEXTRA_TYPE_GIVING_TREE_STUMP,
        TILEEXTRA_TYPE_STEAM_ORGAN,
        TILEEXTRA_TYPE_TAMAGOTCHI,
        TILEEXTRA_TYPE_SWING,
        TILEEXTRA_TYPE_FLAG,
        TILEEXTRA_TYPE_LOBSTER_TRAP,
        TILEEXTRA_TYPE_ART_CANVAS,
        TILEEXTRA_TYPE_BATTLE_CAGE,
        TILEEXTRA_TYPE_PET_TRAINER,
        TILEEXTRA_TYPE_STEAM_ENGINE,
        TILEEXTRA_TYPE_LOCKBOT,
        TILEEXTRA_TYPE_WEATHER_SPECIAL,
        TILEEXTRA_TYPE_SPIRIT_STORAGE,
        TILEEXTRA_TYPE_UNKNOWN_1,
        TILEEXTRA_TYPE_DISPLAY_SHELF,
        TILEEXTRA_TYPE_VIP_ENTRANCE,
        TILEEXTRA_TYPE_CHALLENGE_TIMER,
        TILEEXTRA_TYPE_CHALLENGE_FLAG,
        TILEEXTRA_TYPE_FISH_MOUNT,
        TILEEXTRA_TYPE_PORTRAIT,
        TILEEXTRA_TYPE_WEATHER_SPECIAL2,
        TILEEXTRA_TYPE_FOSSIL_PREP,
        TILEEXTRA_TYPE_DNA_MACHINE,

        TILEEXTRA_TYPE_MAGPLANT = 0x3E,
        TILEEXTRA_TYPE_TESSERACT_MANIPULATOR = 0x45,
        TILEEXTRA_TYPE_GAIA_HEART = 0x46,
        TILEEXTRA_TYPE_TECHNO_ORGANIC_ENGINE = 0x47,
        TILEEXTRA_TYPE_KRANKEN_GALACTIC = 0x50,
        TILEEXTRA_TYPE_WEATHER_INFINITY = 0x4D
    };

    enum eTileFlags : uint16_t {
        TILEFLAG_TILEEXTRA = 1 << 0,
        TILEFLAG_LOCKED = 1 << 1,
        TILEFLAG_UNKNOW_1 = 1 << 2,
        TILEFLAG_UNKNOW_2 = 1 << 3,
        TILEFLAG_SEED = 1 << 4,
        TILEFLAG_FLIPPED = 1 << 5,
        TILEFLAG_OPEN = 1 << 6,
        TILEFLAG_PUBLIC = 1 << 7,
        TILEFLAG_UNKNOW_3 = 1 << 8,
        TILEFLAG_SILENCED = 1 << 9,
        TILEFLAG_WATER = 1 << 10,
        TILEFLAG_GLUE = 1 << 11,
        TILEFLAG_FIRE = 1 << 12,
        TILEFLAG_RED = 1 << 13,
        TILEFLAG_GREEN = 1 << 14,
        TILEFLAG_BLUE = 1 << 15,
    };
    enum eLockFlags : uint8_t {
        LOCKFLAG_AREA_LOCK = (1 << 0),
        LOCKFLAG_INVISIBLE_MUSIC_NOTE = (1 << 4),
        LOCKFLAG_IGNORE_EMPTY_AIR = (1 << 5),
        LOCKFLAG_DISABLE_MUSIC_NOTE = (1 << 5),
        LOCKFLAG_ONLY_BUILDING = (1 << 6),
        LOCKFLAG_SILENCE_GUEST = (1 << 6),
        LOCKFLAG_RAINBOW_TRAIL = (1 << 7),
        LOCKFLAG_RESTRICT_ADMIN = (1 << 7)
    };
}
